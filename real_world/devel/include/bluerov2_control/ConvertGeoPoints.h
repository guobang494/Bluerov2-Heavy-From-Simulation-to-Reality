// Generated by gencpp from file bluerov2_control/ConvertGeoPoints.msg
// DO NOT EDIT!


#ifndef BLUEROV2_CONTROL_MESSAGE_CONVERTGEOPOINTS_H
#define BLUEROV2_CONTROL_MESSAGE_CONVERTGEOPOINTS_H

#include <ros/service_traits.h>


#include <bluerov2_control/ConvertGeoPointsRequest.h>
#include <bluerov2_control/ConvertGeoPointsResponse.h>


namespace bluerov2_control
{

struct ConvertGeoPoints
{

typedef ConvertGeoPointsRequest Request;
typedef ConvertGeoPointsResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;

}; // struct ConvertGeoPoints
} // namespace bluerov2_control


namespace ros
{
namespace service_traits
{


template<>
struct MD5Sum< ::bluerov2_control::ConvertGeoPoints > {
  static const char* value()
  {
    return "a34bd81e20a7f59208cae9a3910e02a9";
  }

  static const char* value(const ::bluerov2_control::ConvertGeoPoints&) { return value(); }
};

template<>
struct DataType< ::bluerov2_control::ConvertGeoPoints > {
  static const char* value()
  {
    return "bluerov2_control/ConvertGeoPoints";
  }

  static const char* value(const ::bluerov2_control::ConvertGeoPoints&) { return value(); }
};


// service_traits::MD5Sum< ::bluerov2_control::ConvertGeoPointsRequest> should match
// service_traits::MD5Sum< ::bluerov2_control::ConvertGeoPoints >
template<>
struct MD5Sum< ::bluerov2_control::ConvertGeoPointsRequest>
{
  static const char* value()
  {
    return MD5Sum< ::bluerov2_control::ConvertGeoPoints >::value();
  }
  static const char* value(const ::bluerov2_control::ConvertGeoPointsRequest&)
  {
    return value();
  }
};

// service_traits::DataType< ::bluerov2_control::ConvertGeoPointsRequest> should match
// service_traits::DataType< ::bluerov2_control::ConvertGeoPoints >
template<>
struct DataType< ::bluerov2_control::ConvertGeoPointsRequest>
{
  static const char* value()
  {
    return DataType< ::bluerov2_control::ConvertGeoPoints >::value();
  }
  static const char* value(const ::bluerov2_control::ConvertGeoPointsRequest&)
  {
    return value();
  }
};

// service_traits::MD5Sum< ::bluerov2_control::ConvertGeoPointsResponse> should match
// service_traits::MD5Sum< ::bluerov2_control::ConvertGeoPoints >
template<>
struct MD5Sum< ::bluerov2_control::ConvertGeoPointsResponse>
{
  static const char* value()
  {
    return MD5Sum< ::bluerov2_control::ConvertGeoPoints >::value();
  }
  static const char* value(const ::bluerov2_control::ConvertGeoPointsResponse&)
  {
    return value();
  }
};

// service_traits::DataType< ::bluerov2_control::ConvertGeoPointsResponse> should match
// service_traits::DataType< ::bluerov2_control::ConvertGeoPoints >
template<>
struct DataType< ::bluerov2_control::ConvertGeoPointsResponse>
{
  static const char* value()
  {
    return DataType< ::bluerov2_control::ConvertGeoPoints >::value();
  }
  static const char* value(const ::bluerov2_control::ConvertGeoPointsResponse&)
  {
    return value();
  }
};

} // namespace service_traits
} // namespace ros

#endif // BLUEROV2_CONTROL_MESSAGE_CONVERTGEOPOINTS_H
