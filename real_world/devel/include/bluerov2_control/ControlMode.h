// Generated by gencpp from file bluerov2_control/ControlMode.msg
// DO NOT EDIT!


#ifndef BLUEROV2_CONTROL_MESSAGE_CONTROLMODE_H
#define BLUEROV2_CONTROL_MESSAGE_CONTROLMODE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace bluerov2_control
{
template <class ContainerAllocator>
struct ControlMode_
{
  typedef ControlMode_<ContainerAllocator> Type;

  ControlMode_()
    : mode(0)  {
    }
  ControlMode_(const ContainerAllocator& _alloc)
    : mode(0)  {
  (void)_alloc;
    }



   typedef uint8_t _mode_type;
  _mode_type mode;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(OFF)
  #undef OFF
#endif
#if defined(_WIN32) && defined(IDLE)
  #undef IDLE
#endif
#if defined(_WIN32) && defined(ACCELTELEOP)
  #undef ACCELTELEOP
#endif
#if defined(_WIN32) && defined(VELTELEOP)
  #undef VELTELEOP
#endif
#if defined(_WIN32) && defined(HOLDPOSITION)
  #undef HOLDPOSITION
#endif
#if defined(_WIN32) && defined(AUTOPILOT)
  #undef AUTOPILOT
#endif
#if defined(_WIN32) && defined(LOSGUIDANCE)
  #undef LOSGUIDANCE
#endif
#if defined(_WIN32) && defined(ABORT)
  #undef ABORT
#endif

  enum {
    OFF = 0u,
    IDLE = 1u,
    ACCELTELEOP = 2u,
    VELTELEOP = 3u,
    HOLDPOSITION = 4u,
    AUTOPILOT = 5u,
    LOSGUIDANCE = 6u,
    ABORT = 7u,
  };


  typedef boost::shared_ptr< ::bluerov2_control::ControlMode_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::bluerov2_control::ControlMode_<ContainerAllocator> const> ConstPtr;

}; // struct ControlMode_

typedef ::bluerov2_control::ControlMode_<std::allocator<void> > ControlMode;

typedef boost::shared_ptr< ::bluerov2_control::ControlMode > ControlModePtr;
typedef boost::shared_ptr< ::bluerov2_control::ControlMode const> ControlModeConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::bluerov2_control::ControlMode_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::bluerov2_control::ControlMode_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::bluerov2_control::ControlMode_<ContainerAllocator1> & lhs, const ::bluerov2_control::ControlMode_<ContainerAllocator2> & rhs)
{
  return lhs.mode == rhs.mode;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::bluerov2_control::ControlMode_<ContainerAllocator1> & lhs, const ::bluerov2_control::ControlMode_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace bluerov2_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::bluerov2_control::ControlMode_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bluerov2_control::ControlMode_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bluerov2_control::ControlMode_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bluerov2_control::ControlMode_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bluerov2_control::ControlMode_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bluerov2_control::ControlMode_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::bluerov2_control::ControlMode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c56dad23c66f87b189d2dc2a882cdf21";
  }

  static const char* value(const ::bluerov2_control::ControlMode_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc56dad23c66f87b1ULL;
  static const uint64_t static_value2 = 0x89d2dc2a882cdf21ULL;
};

template<class ContainerAllocator>
struct DataType< ::bluerov2_control::ControlMode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bluerov2_control/ControlMode";
  }

  static const char* value(const ::bluerov2_control::ControlMode_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::bluerov2_control::ControlMode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 OFF=0\n"
"uint8 IDLE=1\n"
"uint8 ACCELTELEOP=2\n"
"uint8 VELTELEOP=3\n"
"uint8 HOLDPOSITION=4\n"
"uint8 AUTOPILOT=5\n"
"uint8 LOSGUIDANCE=6\n"
"uint8 ABORT=7\n"
"\n"
"uint8 mode\n"
;
  }

  static const char* value(const ::bluerov2_control::ControlMode_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::bluerov2_control::ControlMode_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.mode);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ControlMode_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::bluerov2_control::ControlMode_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::bluerov2_control::ControlMode_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mode);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BLUEROV2_CONTROL_MESSAGE_CONTROLMODE_H
