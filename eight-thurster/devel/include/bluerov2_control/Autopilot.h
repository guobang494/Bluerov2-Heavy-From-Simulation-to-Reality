// Generated by gencpp from file bluerov2_control/Autopilot.msg
// DO NOT EDIT!


#ifndef BLUEROV2_CONTROL_MESSAGE_AUTOPILOT_H
#define BLUEROV2_CONTROL_MESSAGE_AUTOPILOT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace bluerov2_control
{
template <class ContainerAllocator>
struct Autopilot_
{
  typedef Autopilot_<ContainerAllocator> Type;

  Autopilot_()
    : header()
    , U(0.0)
    , Z(0.0)
    , psi(0.0)
    , reference(0)  {
    }
  Autopilot_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , U(0.0)
    , Z(0.0)
    , psi(0.0)
    , reference(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _U_type;
  _U_type U;

   typedef double _Z_type;
  _Z_type Z;

   typedef double _psi_type;
  _psi_type psi;

   typedef uint8_t _reference_type;
  _reference_type reference;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(DEPTH)
  #undef DEPTH
#endif
#if defined(_WIN32) && defined(ALT)
  #undef ALT
#endif
#if defined(_WIN32) && defined(NONE)
  #undef NONE
#endif

  enum {
    DEPTH = 0u,
    ALT = 1u,
    NONE = 2u,
  };


  typedef boost::shared_ptr< ::bluerov2_control::Autopilot_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::bluerov2_control::Autopilot_<ContainerAllocator> const> ConstPtr;

}; // struct Autopilot_

typedef ::bluerov2_control::Autopilot_<std::allocator<void> > Autopilot;

typedef boost::shared_ptr< ::bluerov2_control::Autopilot > AutopilotPtr;
typedef boost::shared_ptr< ::bluerov2_control::Autopilot const> AutopilotConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::bluerov2_control::Autopilot_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::bluerov2_control::Autopilot_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::bluerov2_control::Autopilot_<ContainerAllocator1> & lhs, const ::bluerov2_control::Autopilot_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.U == rhs.U &&
    lhs.Z == rhs.Z &&
    lhs.psi == rhs.psi &&
    lhs.reference == rhs.reference;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::bluerov2_control::Autopilot_<ContainerAllocator1> & lhs, const ::bluerov2_control::Autopilot_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace bluerov2_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::bluerov2_control::Autopilot_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bluerov2_control::Autopilot_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bluerov2_control::Autopilot_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bluerov2_control::Autopilot_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bluerov2_control::Autopilot_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bluerov2_control::Autopilot_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::bluerov2_control::Autopilot_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4b52700fd1487670315929e62e105ffb";
  }

  static const char* value(const ::bluerov2_control::Autopilot_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4b52700fd1487670ULL;
  static const uint64_t static_value2 = 0x315929e62e105ffbULL;
};

template<class ContainerAllocator>
struct DataType< ::bluerov2_control::Autopilot_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bluerov2_control/Autopilot";
  }

  static const char* value(const ::bluerov2_control::Autopilot_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::bluerov2_control::Autopilot_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 DEPTH=0\n"
"uint8 ALT=1\n"
"uint8 NONE=2\n"
"Header header\n"
"float64 U  # forward speed (m/s)\n"
"float64 Z  # vertical distance (m)\n"
"float64 psi  # Heading (ENU) (radians)\n"
"uint8 reference  # vertical distance reference type\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::bluerov2_control::Autopilot_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::bluerov2_control::Autopilot_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.U);
      stream.next(m.Z);
      stream.next(m.psi);
      stream.next(m.reference);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Autopilot_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::bluerov2_control::Autopilot_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::bluerov2_control::Autopilot_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "header: ";
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "U: ";
    Printer<double>::stream(s, indent + "  ", v.U);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "Z: ";
    Printer<double>::stream(s, indent + "  ", v.Z);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "psi: ";
    Printer<double>::stream(s, indent + "  ", v.psi);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "reference: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.reference);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BLUEROV2_CONTROL_MESSAGE_AUTOPILOT_H
